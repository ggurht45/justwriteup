goals
working on background section. explaining about javafx:
	-	talk about javafx scenegraph, when root node is discussed.  --done
	-	talk about launch and start methods --done
	-	think about what to write next. --done	
	-	take pic of stagesceneroot, put it in figures. --done
	-	push --done
	- 	put line numbers on code sample --done, but looks too left. 
	-	add figure label to code sample --works. so happy.
	-	work on writing on computer rather than online. faster feedback. --nah. doesnt work
	-	put stuff on overleaf. --working on it. seem to have a method that works now. 
	-	what is fxml. --done 
	-	give a very short example of fxml--done
	-	make a pic of what the both examples should show. --nah will leave this for now. actually will do it. how long can it take
	-	discuss fxmlloader.--done  what? why? when do i use it?  --done. 
	-	write about fxml. give a short example and explain it. --done
	-	write about fxmlloader. --done
	-	explain how "" its used in this project, especially static vs instance method.--done
	-	explain why it is important to get a handle on the controller object. --done
	-	fix bug about verb. latex has the weirdest bugs. something about main having problem at 313. and next not getting closed. but actual problem was verbaitum not getting closed i think. --done
	-	fix comments --done
	- 	discuss scenebuilder. --done
	-	discuss libraries jfoenix. just discuss it for now. --done
	-	start discuss leapmotion. --done
	-	give a small example of lm --done
	-	look at zifos for inspiration. dont have to write a lot. --done	
	
	
	-	fix spelling mistakes in draft 1. 
--------------------------------------------------------------






	
working on chapter 2, ui hand model 	
	-	work hard. 
		- good job. you worked hard. keep working hard. it will all pay off ^^
		- took way too long break from 9:20-11:20. 
		- good job. started workign hard again. recite for encouragement. 
		- 
		- started working on writing concurrency stuff. just began but still a very big milestone. good job! ^^
		- keep up the good work. it will all pay off. 
	'	
	
	- fix spelling and code samples. --done
	- fix figure names and referencing. --done
	
	- explain that javafx scene graph, the ui component of a javafx appliction, is not thread safe. 
	- '' to modify it, it can only be accessed and updated via the main ui thread. (see below)
	- explain what is JavaFX Application thread. 
	
	- read for understanding: make notes. exposition. 
	- http://docs.oracle.com/javafx/2/threads/jfxpub-threads.htm
		- write notes here
		- quick read. till 45. 
		- key is keeping the ui responsive. --> so user doesnt get angry. (first paragraph). 
		- to achieve '' you delegate time-consuming tasks to background threads. 
		- scenegraph/ui is not threadsafe can be only modified via javafx application thread (jat)
		- implementing long tasks on ^ makes it unresponsive the ui i mean. 
		- best practice is to put long time taking tasks on background threads and let the main jat *** proccess user events** 
		- implementing a background worker by creating or implementing the runnable interface can be rather tricky to get just right and often leads to unintended consequences such as deadlock where the threads are stuck waiting forevever and race conditions in which critical data can be modified relatively simultaneously by two competing threads. 
		- therefore the recomended approach is to use the javafx apis provided in the ... concurrent package. the classes in this package take care of providing the best implementations to interact with the UI and to ensure the interaction happens on the correct thread. 
		- java is so nice. lol
		
		-NOTE. we only use the task class in the concurrent package. 
		
		
		
		
		
	- https://stackoverflow.com/questions/15160410/usage-of-javafx-platform-runlater-and-access-to-ui-from-a-different-thread
		- write notes here
		
		
	- https://stackoverflow.com/questions/19755031/how-javafx-application-thread-works
		- write notes here		
		
		
		
	'
	
	
	
	
	
	
	
	
	
	- read the docs on javafx.concurrent and make notes about what to write about. 
	- also glance at the code to see how you want to explain it. maybe will need to do some debugging. but first read and get working on paragraph. 	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	- write one sentence at a time. think about what the sentence should be. write out what you should be expressing (as if you are trying to explain it to a friend). seeing this in words will make it more concrete and help you write what you need to. 
	- think about what questions you are trying to answer. write them in the paragraph to help you begin
	
	- can take out driving questions later. 

	
	
	
	
	- 	snchronized. platform.runlater. print statements to determine which methods actually run. 		
	- why is synchronized important. what does it mean in the program. 
	- what is run later? is it a thread? does it start multiple threads? 
	- explain how the program is running several threads in conjuction. 
	- for example, the one listening on user input, the one processing data from lm
	

	
	-	update bibliography on overleaf. 
--------------------------------------------------------------
	

	
	
	
	
	
	
	
	
	
	
%----------------------------------- Limitations of Sensor and Documentation (put this when talking about rotation and coordinate systems chapter)
\subsection{Limitations of Sensor and Documentation}
--occulusion
--discontinuation of publishing v2 apps
--sensor resetting by opening palm
--not enough documentation for linux/ubuntu. 
--talk about the right handed coordinate system of leap motion. (do this in the section on coordinate systems)




------Appendix A:
setting up project in intellij ide. 
--discuss how to set the library path for compiling and running jar. and program. 
talk about sdk and how its different from just installing leap motion. <- runs a process. etc. to be able to receive info from that process we need 
native lib. 
--read the page on lm website and summarize
